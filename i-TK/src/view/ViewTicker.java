/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import controller.ManageExcel;
import static controller.ManageExcel.checkIfExists;
import static controller.ManageExcel.getAllDataFromFile;
import static controller.ManageExcel.getHeaderList;
import static controller.ManageExcel.setInputFile;
import controller.RowTicker;
import controller.TickerController;
import static controller.TickerController.getRowTickerArray;
import static controller.TickerController.runMeAtStart;
import java.io.IOException;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import model.DBtkEvo;
import static controller.ManageExcel.getAllDataFromFile;
import static controller.ManageExcel.getAllDataFromTKFile;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import static controller.ManageExcel.getAllDataFromFile;
import static controller.ManageExcel.getAllDataFromFile;
import controller.RowChoosenTks;
import static controller.TickerController.sortTicker;
import java.io.FileOutputStream;
import java.io.OutputStreamWriter;

/**
 *
 * @author virginia
 */
public class ViewTicker extends javax.swing.JFrame {

    public static TickerController tkC = new TickerController();
    public static String outputExcelFile = "none";
    public static String choosedTKTable = "";
    public static DBtkEvo myStmtDB = null;
    public static String queryToInsChTK = "";

    /**
     * Creates new form ViewTicker
     */
    public ViewTicker() {
        // Inizialize data from config file: Create or COnn DB - Create two tables return the list of config data.
        myStmtDB = (DBtkEvo) runMeAtStart().get(0);
        ArrayList<String> setList = new ArrayList<>();
        ArrayList<Object> subSetList = runMeAtStart();
        for (int ii = 1; ii < runMeAtStart().size(); ii++) {
            setList.add((String) subSetList.get(ii));
        } // From here setList has all config data
        outputExcelFile = setList.get(8);
        //RowTicker rrt = myStmtDB.getAllFromDBData(); // get data from DB

        // Set source/target table for choosed TK
        choosedTKTable = setList.get(4);

        // Query Insert data in CH TK table
        queryToInsChTK = setList.get(6);

        // Initialize the UI
        initComponents();

        // Enable or disable the search Button
        // String pathTKsaved = setList.get(8);
        //buttonEnabling(pathTKsaved);
        buttonEnabling();

    }

    public void write2configFile(String selectedPath) throws FileNotFoundException, IOException {
        File inputFile = new File(TickerController.getConfigFullPath());
        File tempFile = new File(TickerController.getConfigTempFullPath());

        BufferedReader reader = new BufferedReader(new FileReader(inputFile));
        BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(tempFile), "UTF-8"));
        //BufferedWriter writer = new BufferedWriter(new FileWriter(tempFile));

        String lineToReplace = "savedTickerPath=";
        String currentLine;

        while ((currentLine = reader.readLine()) != null) {
            // trim newline when comparing with lineToRemove
            String trimmedLine = currentLine.trim();
            String[] rowElement = trimmedLine.split(";");
            if (rowElement[0].equals(lineToReplace)) {
                writer.write(rowElement[0] + ";" + selectedPath + ";" + System.getProperty("line.separator"));
            } else {
                writer.write(currentLine + System.getProperty("line.separator"));
            }
        }
        writer.close();
        reader.close();
        inputFile.delete();
        boolean successful = tempFile.renameTo(inputFile);
        System.out.println(successful);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSplitPane2 = new javax.swing.JSplitPane();
        jSplitPane3 = new javax.swing.JSplitPane();
        jSplitPane4 = new javax.swing.JSplitPane();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jSplitPane2.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        jButton1.setText("Sel. Cartella Destinazione");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jSplitPane4.setLeftComponent(jButton1);

        jButton2.setText("Avvia Scaricamento");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jSplitPane4.setRightComponent(jButton2);

        jSplitPane3.setRightComponent(jSplitPane4);

        jTextField1.setText("e.g.PHAU.MI");
        jSplitPane3.setLeftComponent(jTextField1);

        jSplitPane2.setTopComponent(jSplitPane3);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane3.setViewportView(jTable1);

        jSplitPane2.setRightComponent(jScrollPane3);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 545, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 308, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        //Create a file chooser
        final JFileChooser fc = new JFileChooser();
        fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        //In response to a button click:
        int result = fc.showOpenDialog(jButton1);

        if (result == JFileChooser.APPROVE_OPTION) {
            String selectedPath = fc.getSelectedFile().getAbsolutePath();
            System.out.println("Open was selected: " + selectedPath);
            try {
                write2configFile(selectedPath);
                outputExcelFile = selectedPath;

            } catch (IOException ex) {
                Logger.getLogger(ViewTicker.class.getName()).log(Level.SEVERE, null, ex);
            }
            jButton2.setEnabled(true);
        } else if (result == JFileChooser.CANCEL_OPTION) {
            String selectedPath = fc.getCurrentDirectory().getAbsolutePath();
            System.out.println("Cancel was selected: " + "none");
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        String tickerName = jTextField1.getText();
        Boolean isWebConn = TickerController.getWebConnection();
        if (isWebConn) {
            String myTKs = TickerController.makeURL(tickerName);
            TickerController.searchSaveTK(myTKs, tickerName);
            ArrayList<ArrayList<String>> data = getAllDataFromTKFile(tickerName, ',');
            ArrayList<RowTicker> myTicker = getRowTickerArray(data);
            ArrayList<RowTicker> mySortedTicker = sortTicker(myTicker);
            // Add Choosen TK
            ArrayList<RowChoosenTks> information = new ArrayList<>();
            RowChoosenTks myRowCh = TickerController.addTkChoosenInOBJ(myStmtDB, choosedTKTable, tickerName);
            information.add(myRowCh);
            Boolean allIn = myStmtDB.insRowChoosenTKinDB(information, queryToInsChTK, choosedTKTable);
            // end
//            ManageExcel.createExcel(myTicker, outputExcelFile, tickerName);
            boolean fileAlreadyExists = checkIfExists(tickerName, outputExcelFile);

            if (fileAlreadyExists) {

                ManageExcel.modifyExcel(myTicker, outputExcelFile, tickerName);

            } else {
                ManageExcel.createExcel(myTicker, outputExcelFile, tickerName);
                //TickerController.addTkChoosenInOBJ();
            }

        } else {
            System.out.println("Controllare la connessione ad internet");
        }


    }//GEN-LAST:event_jButton2ActionPerformed

    private void buttonEnabling() {
        if (outputExcelFile.equals("none")) {
            jButton2.setEnabled(false);
        } else {
            jButton2.setEnabled(true);
        }
    }

    private void buttonEnabling(String pathConfigFile) {
        if (pathConfigFile.equals("none")) {
            jButton2.setEnabled(false);
        } else {
            jButton2.setEnabled(true);
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) throws IOException {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ViewTicker.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ViewTicker.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ViewTicker.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ViewTicker.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
//        System.out.println("My relative Path:");
//        System.out.println(new File(".").getCanonicalPath());

        //DBtkEvo myStmtDB = (DBtkEvo) runMeAtStart().get(0);
        //ArrayList<String> setList = new ArrayList<>();
        //ArrayList<Object> subSetList = runMeAtStart();
        //subSetList = subSetList.subList(1,runMeAtStart().size());
        //for (int ii = 1; ii < runMeAtStart().size(); ii++) {
        //    setList.add((String) subSetList.get(ii));
        //}
        //String testTKSearch = "PHAU.MI";
        //String myTKs = TickerController.makeURL(testTKSearch);
        //TickerController.searchSaveTK(myTKs, testTKSearch);
        //ArrayList<ArrayList<String>> data = getAllDataFromTKFile(testTKSearch, ',');
        //ArrayList<RowTicker> myTicker = getRowTickerArray(data);
        //myStmtDB.insertRowTKinDB(myTicker, myStmtDB.getQuery());// Use default query -NEED override this method!!
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ViewTicker().setVisible(true);
            }
        });

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSplitPane jSplitPane2;
    private javax.swing.JSplitPane jSplitPane3;
    private javax.swing.JSplitPane jSplitPane4;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
